version: '3.8'

services:
  # API Gateway
  api_gateway:
    build:
      context: ./src/api_gateway
      dockerfile: Dockerfile
    ports:
      - "8000:80"
    depends_on:
      - auth_service
      - profile_service
      - content_service
      - collection_service
      - parser_service
      - recommendation_service
      - search_service
      - social_service
      - admin_service
    networks:
      - infohub_network
    restart: unless-stopped

  # User Services
  auth_service:
    build:
      context: ./src/user/auth_service
      dockerfile: Dockerfile
    env_file: 
      - ./src/user/auth_service/.env
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - infohub_network
    restart: unless-stopped

  profile_service:
    build:
      context: ./src/user/profile_service
      dockerfile: Dockerfile
    env_file: 
      - ./src/user/profile_service/.env
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - infohub_network
    restart: unless-stopped

  # Content Services
  content_service:
    build:
      context: ./src/content/content_service
      dockerfile: Dockerfile
    env_file: 
      - ./src/content/content_service/.env
    depends_on:
      - postgres
      - elasticsearch
      - rabbitmq
    networks:
      - infohub_network
    restart: unless-stopped

  collection_service:
    build:
      context: ./src/content/collection_service
      dockerfile: Dockerfile
    env_file: 
      - ./src/content/collection_service/.env
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - infohub_network
    restart: unless-stopped

  parser_service:
    build:
      context: ./src/content/parser_service
      dockerfile: Dockerfile
    env_file: 
      - ./src/content/parser_service/.env
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - infohub_network
    restart: unless-stopped

  # Discovery Services
  recommendation_service:
    build:
      context: ./src/discovery/recommendation_service
      dockerfile: Dockerfile
    env_file: 
      - ./src/discovery/recommendation_service/.env
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - infohub_network
    restart: unless-stopped

  search_service:
    build:
      context: ./src/discovery/search_service
      dockerfile: Dockerfile
    env_file: 
      - ./src/discovery/search_service/.env
    depends_on:
      - elasticsearch
      - rabbitmq
    networks:
      - infohub_network
    restart: unless-stopped

  # Social Service
  social_service:
    build:
      context: ./src/social/social_service
      dockerfile: Dockerfile
    env_file: 
      - ./src/social/social_service/.env
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - infohub_network
    restart: unless-stopped

  # Admin Service
  admin_service:
    build:
      context: ./src/moderation/admin_service
      dockerfile: Dockerfile
    env_file: 
      - ./src/moderation/admin_service/.env
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - infohub_network
    restart: unless-stopped

  # Infrastructure Services
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - infohub_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:8.4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "5050:80"
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      - postgres

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    networks:
      - infohub_network
    restart: unless-stopped
    healthcheck:
      test: curl -s http://localhost:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "${REDIS_PORT}:6379"
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    networks:
      - infohub_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "15672:15672"
    networks:
      - infohub_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  infohub_network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin:
  elasticsearch_data:
  redis_data:
  rabbitmq_data:

